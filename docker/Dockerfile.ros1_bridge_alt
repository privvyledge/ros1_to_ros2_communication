# Usage: docker build -t privvyledge/ros:foxy-ros1-bridge -f docker/Dockerfile.ros1_bridge .
# Run:  docker run --rm -ti --net host --env ROS_MASTER_URI=http://192.168.2.193:11311 -v ../ros1_to_ros2_communication:/ros1_to_ros2_communication privvyledge/ros:foxy-ros1-bridge

## or
#xhost +local:root && \
#  jetson-containers run -v /dev:/dev -v ${HOME}/shared_dir:/mnt/shared_dir \
#  -v ${HOME}/data:/mnt/data --ipc host --env="QT_X11_NO_MITSHM=1" --privileged \
#   -v ./ros1_to_ros2_communication:/ros1_to_ros2_communication \
#  --env ROS_MASTER_URI=http://192.168.2.193:11311 \
#  privvyledge/ros:foxy-ros1-bridge /bin/bash && \
#  xhost -local:root

ARG ROS1_DISTRO=noetic
ARG ROS2_DISTRO=foxy
# ROS1 Noetic and ROS2 Foxy with ROS1 bridge
FROM ros:${ROS1_DISTRO}-perception

# Set up the shell
ENV SHELL=/bin/bash
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NONINTERACTIVE_SEEN=true
ENV TZ=America/New_York
ENV HOME=/root

# Set environment variables
# Avoid DDP error "MKL_THREADING_LAYER=INTEL is incompatible with libgomp.so.1 library" https://github.com/pytorch/pytorch/issues/37377
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1

# Install linux packages
# g++ required to build 'tflite_support' and 'lap' packages, libusb-1.0-0 required for 'tflite_support' package
# libsm6 required by libqxcb to create QT-based windows for visualization; set 'QT_DEBUG_PLUGINS=1' to test in docker
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    sudo gcc git zip unzip wget curl htop libgl1 libglib2.0-0 libpython3-dev gnupg g++ libusb-1.0-0 libsm6 \
    && rm -rf /var/lib/apt/lists/*

# Setup default timezone
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -yq --no-install-recommends tzdata && \
    ln -fns /usr/share/zoneinfo/${TZ} /etc/localtime && echo $TZ > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata && \
    rm -rf /var/lib/apt/lists/*


# Security updates
# https://security.snyk.io/vuln/SNYK-UBUNTU1804-OPENSSL-3314796
RUN apt upgrade --no-install-recommends -y openssl tar

RUN sudo apt-get update -y && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    sudo \
    git \
    curl \
    wget \
    less \
    zstd \
    udev \
    unzip \
    build-essential \
    apt-transport-https \
    openssh-server \
    ca-certificates \
    software-properties-common \
    lsb-release \
    gnupg2 \
    cmake \
    ccache \
    pkg-config \
    swig \
    g++ && \
    sudo rm -rf /var/lib/apt/lists/*

# Install ROS for non-ROS base packages.
ARG ROS1_DISTRO
ARG ROS2_DISTRO
ENV ROS1_DISTRO=${ROS1_DISTRO}
ENV ROS2_DISTRO=${ROS2_DISTRO}
ENV LANG=en_US.UTF-8

RUN apt update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
    locales && \
    locale-gen en_US en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    export LANG=en_US.UTF-8 && \
    apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository -y universe && \
    apt update && apt-get install -y --no-install-recommends curl && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt update && \
    apt-get remove -y python3-catkin-pkg python3-rospkg python3-rosdistro && \
    apt purge python-rosdep2 python3-rosdep2 -y && \
    apt update && DEBIAN_FRONTEND="noninteractive" apt install -y \
    python3-rosdep \
    ros-${ROS2_DISTRO}-desktop \
    ros-dev-tools \
    ros-${ROS2_DISTRO}-rmw-cyclonedds-cpp && \
    rm -rf /var/lib/apt/lists/* && \
    . /opt/ros/${ROS2_DISTRO}/setup.bash && \
    rosdep update && \
    rm -rf /var/lib/apt/lists/*


# ROS fundamentals
RUN --mount=type=cache,target=/var/cache/apt \
        sudo apt-get update -y && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
        devscripts \
        dh-make \
        fakeroot \
        python3-bloom \
        python3-colcon-common-extensions \
        python3-pip \
        python3-pybind11 \
        python3-pytest-cov \
        python3-rosdep \
        python3-rosinstall-generator \
        python3-vcstool \
        python3-colcon-mixin \
        python3-flake8-docstrings \
        python3-pip \
        python3-pytest-cov \
        ros-dev-tools \
        quilt && \
    sudo rm -rf /var/lib/apt/lists/*

# ROS Python fundamentals. Todo: install python3.10 from deadsnakes archive
RUN python3 -m pip install \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-docstrings \
        flake8-import-order \
        flake8-quotes \
        rosbags && \
    sudo rm -rf /var/lib/apt/lists/*

# Install ROS1 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-${ROS1_DISTRO}-ros-comm \
    ros-${ROS1_DISTRO}-roscpp-tutorials \
    ros-${ROS1_DISTRO}-rospy-tutorials \
    ros-${ROS1_DISTRO}-nav-msgs \
    ros-${ROS1_DISTRO}-ackermann-msgs \
    ros-${ROS1_DISTRO}-sensor-msgs \
    ros-${ROS1_DISTRO}-tf2-tools \
    ros-${ROS1_DISTRO}-rqt-tf-tree \
    ros-${ROS1_DISTRO}-tf2-geometry-msgs \
    ros-${ROS1_DISTRO}-twist-mux \
    ros-${ROS1_DISTRO}-teleop-twist-joy \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# install ROS2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
#    ros-${ROS2_DISTRO}-ros1-bridge \
    ros-${ROS2_DISTRO}-demo-nodes-cpp \
    ros-${ROS2_DISTRO}-demo-nodes-py \
    ros-${ROS2_DISTRO}-nav-msgs \
    ros-${ROS2_DISTRO}-ackermann-msgs \
    ros-${ROS2_DISTRO}-sensor-msgs \
    ros-${ROS2_DISTRO}-rmw-fastrtps-cpp \
    ros-${ROS2_DISTRO}-rmw-cyclonedds-cpp \
    ros-${ROS2_DISTRO}-tf2-tools \
    ros-${ROS2_DISTRO}-tf-transformations \
    ros-${ROS2_DISTRO}-rqt-tf-tree \
    ros-${ROS2_DISTRO}-tf2-geometry-msgs \
    ros-${ROS2_DISTRO}-twist-mux \
    ros-${ROS2_DISTRO}-joy-linux \
    ros-${ROS2_DISTRO}-teleop-twist-joy \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# build ROS1 bridge (necessary to add support for Ackermann messages and others. They must be installed first)
# https://industrial-training-master.readthedocs.io/en/foxy/_source/session7/ROS1-ROS2-bridge.html#build-the-ros1-bridge
RUN mkdir -p ~/ros1_bridge_ws/src && \
    cd ~/ros1_bridge_ws/src && \
    git clone -b ${ROS2_DISTRO} https://github.com/ros2/ros1_bridge.git && \
    source /opt/ros/${ROS1_DISTRO}/setup.bash && \
    source /opt/ros/${ROS2_DISTRO}/setup.bash && \
#    source ~/catkin_ws_to_bridge/devel/setup.bash && \
#    source ~/colcon_ws/install/setup.bash && \
    cd ~/ros1_bridge_ws && \
    colcon build --packages-select ros1_bridge --cmake-force-configure --cmake-args -DBUILD_TESTING=FALSE

RUN apt-get update && apt-get install -y --no-install-recommends \
    gettext \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Link to allow sourcing
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# Alias for sourcing
# sr1 -> source ros 1, sr2 -> source ros 2
RUN echo "alias sr1='source /opt/ros/${ROS1_DISTRO}/setup.bash'" >> /etc/bash.bashrc
RUN echo "alias sr2='source /opt/ros/${ROS2_DISTRO}/setup.bash'" >> /etc/bash.bashrc
RUN echo "alias sr3='source ~/ros1_bridge_ws/install/setup.bash'" >> /etc/bash.bashrc

# setup entrypoint
COPY ./ros_entrypoint.sh /
RUN chmod +x /ros_entrypoint.sh
ENTRYPOINT ["/ros_entrypoint.sh"]

# In the container, run
# `sr1 && rosparam load /ros1_to_ros2_communication/topics_to_bridge.yaml && sr2 && sr3 &&  ros2 run ros1_bridge dynamic_bridge --print-pairs` to see the available bridged topics
# `sr1 && rosparam load /ros1_to_ros2_communication/topics_to_bridge.yaml && sr2 && sr3 &&  ros2 run ros1_bridge dynamic_bridge` to see the available bridged topics
CMD ["bash"]